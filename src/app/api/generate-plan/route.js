import { NextResponse } from "next/server";

export async function POST(request) {
  try {
    if (!process.env.GEMINI_API_KEY) {
      return NextResponse.json(
        { error: "API key not configured" },
        { status: 500 }
      );
    }

    const body = await request.json();
    const { origin, destination, travelDate, duration, budget, travelType } = body;

    if (!origin || !destination || !travelDate || !duration || !budget || !travelType) {
      return NextResponse.json(
        { error: "All fields are required" },
        { status: 400 }
      );
    }

    const prompt = `
You are an expert travel planner. Create a detailed, practical travel itinerary with the following details:

ORIGIN: ${origin}
DESTINATION: ${destination} 
TRAVEL DATE: ${travelDate}
DURATION: ${duration} days
BUDGET LEVEL: ${budget}
TRAVEL TYPE: ${travelType}

Please provide a comprehensive travel plan that includes:

1. TRIP OVERVIEW
   - Brief summary and highlights
   - Best time to visit and weather expectations

2. DAY-BY-DAY ITINERARY
   For each day, include:
   - Morning activities with specific locations
   - Afternoon activities with specific locations  
   - Evening activities with specific locations
   - Travel time estimates between locations

3. ACCOMMODATION RECOMMENDATIONS
   - ${budget}-friendly options in different areas
   - Best neighborhoods to stay in

4. TRANSPORTATION GUIDE
   - How to travel from ${origin} to ${destination}
   - Local transportation options

5. DINING & FOOD EXPERIENCES
   - Must-try local dishes
   - Restaurant recommendations for ${budget} budget

6. BUDGET BREAKDOWN (in Indian Rupees)
   - Accommodation, food, activity, and transportation costs
   - Money-saving tips

7. ${travelType.toUpperCase()} TRAVEL TIPS
   - Specific advice for ${travelType} travel
   - Safety considerations
   - Cultural etiquette

Please make the itinerary practical, specific, and easy to follow.
`;

    // Use the models that are actually available in your account
    const modelsToTry = [
      { name: "gemini-2.0-flash", endpoint: "v1" },
      { name: "gemini-2.0-flash-001", endpoint: "v1" },
      { name: "gemini-2.5-flash", endpoint: "v1" },
      { name: "gemini-2.5-flash-lite", endpoint: "v1" },
      { name: "gemini-2.0-flash-exp", endpoint: "v1beta" },
      { name: "gemini-pro-latest", endpoint: "v1beta" }
    ];

    let lastError = null;

    for (const { name: model, endpoint } of modelsToTry) {
      try {
        console.log(`Trying model: ${model} with endpoint: ${endpoint}`);
        
        const API_URL = `https://generativelanguage.googleapis.com/${endpoint}/models/${model}:generateContent?key=${process.env.GEMINI_API_KEY}`;
        
        const response = await fetch(API_URL, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            contents: [
              {
                parts: [
                  {
                    text: prompt
                  }
                ]
              }
            ],
            generationConfig: {
              temperature: 0.7,
              topK: 40,
              topP: 0.95,
              maxOutputTokens: 4096,
            }
          }),
        });

        if (!response.ok) {
          const errorText = await response.text();
          throw new Error(`Model ${model} failed: ${response.status} - ${errorText}`);
        }

        const data = await response.json();
        
        if (data.candidates && data.candidates[0] && data.candidates[0].content && data.candidates[0].content.parts[0]) {
          let generatedText = data.candidates[0].content.parts[0].text;
          
          // Replace any AI/Gemini branding with OPO branding
          generatedText = generatedText.replace(/Gemini|AI|Google AI|generated by AI|powered by AI/gi, 'OPO Trip Planner');
          
          console.log(`Success with model: ${model}`);
          
          return NextResponse.json({ 
            success: true,
            plan: generatedText,
            modelUsed: model
          });
        } else {
          throw new Error(`Model ${model} returned unexpected response format`);
        }
        
      } catch (modelError) {
        console.log(`Model ${model} failed:`, modelError.message);
        lastError = modelError;
        // Continue to next model
      }
    }

    throw new Error(`All models failed. Last error: ${lastError?.message}`);

  } catch (error) {
    console.error("Error generating travel plan:", error);
    
    // Fallback to enhanced mock data
    const mockPlan = generateMockPlan(origin, destination, travelDate, duration, budget, travelType);
    
    return NextResponse.json({ 
      success: true,
      plan: mockPlan,
      note: "Using enhanced travel data - API models not accessible"
    });
  }
}

function generateMockPlan(origin, destination, travelDate, duration, budget, travelType) {
  return `
🗺️ OPO Travel Plan: ${origin} to ${destination}

TRIP OVERVIEW
• Duration: ${duration} days
• Travel Date: ${travelDate}
• Budget: ${budget}
• Travel Style: ${travelType}
• Best Time to Visit: Based on your travel date
• Weather: Pleasant conditions expected

DAY-BY-DAY ITINERARY

Day 1: Arrival & Settlement
• Morning: Travel from ${origin} to ${destination}
• Afternoon: Check into ${budget}-friendly accommodation
• Evening: Explore local neighborhood, casual dinner

Day 2: City Exploration
• Morning: Visit main landmarks and attractions
• Afternoon: Local market and cultural experiences  
• Evening: Traditional cuisine at recommended restaurant

${duration > 2 ? `Day 3-${duration-1}: Adventure & Culture
• Outdoor activities or museum visits
• Day trips to nearby attractions
• Local festival or event participation` : ''}

Final Day: Departure
• Morning: Last-minute shopping and breakfast
• Afternoon: Travel back to ${origin}

ACCOMMODATION RECOMMENDATIONS
• Budget Range: ${getBudgetRange(budget)}
• Recommended Areas: City center or tourist-friendly neighborhoods
• Tips: Book in advance for better rates

TRANSPORTATION GUIDE
• To ${destination}: Flights/trains from ${origin}
• Local: Public transport, taxis, and walking
• Tips: Get local transport card for savings

DINING & FOOD EXPERIENCES
• Must-try local dishes
• ${budget}-friendly restaurant suggestions
• Food markets for authentic experiences

BUDGET BREAKDOWN (Estimated in INR)
${generateBudgetBreakdown(duration, budget, travelType)}

${travelType.toUpperCase()} TRAVEL TIPS
${getTravelTips(travelType)}

PACKING CHECKLIST
• Travel documents and copies
• Weather-appropriate clothing  
• Local currency and payment methods
• Essential medications
• Travel adapters and chargers

---
Crafted by OPO Trip Planner | Actual prices may vary
`;
}

function getBudgetRange(budget) {
  const ranges = {
    low: "₹1,000-2,500 per night",
    medium: "₹2,500-6,000 per night", 
    high: "₹6,000-15,000+ per night"
  };
  return ranges[budget] || ranges.medium;
}

function generateBudgetBreakdown(duration, budget, travelType) {
  const base = {
    low: { accommodation: 1500, food: 800, activities: 500, transport: 400 },
    medium: { accommodation: 3500, food: 1500, activities: 1000, transport: 800 },
    high: { accommodation: 7000, food: 3000, activities: 2000, transport: 1500 }
  };
  
  const rates = base[budget] || base.medium;
  const multiplier = travelType === 'family' ? 1.5 : travelType === 'couple' ? 1.2 : 1;
  
  return `
• Accommodation: ₹${Math.round(duration * rates.accommodation * multiplier)}
• Food & Dining: ₹${Math.round(duration * rates.food * multiplier)} 
• Activities: ₹${Math.round(duration * rates.activities * multiplier)}
• Transportation: ₹${Math.round(duration * rates.transport * multiplier)}
• Total Estimate: ₹${Math.round(duration * (rates.accommodation + rates.food + rates.activities + rates.transport) * multiplier)}
  `;
}

function getTravelTips(travelType) {
  const tips = {
    solo: "• Stay in social hostels\n• Keep emergency contacts handy\n• Join group tours to meet people",
    couple: "• Book romantic dining in advance\n• Look for couple-friendly activities\n• Consider private transportation",
    family: "• Choose family-friendly hotels\n• Plan kid-friendly activities\n• Look for hotels with kitchenettes", 
    friends: "• Coordinate group activities\n• Consider vacation rentals\n• Use group discounts where available"
  };
  return tips[travelType] || tips.solo;
}